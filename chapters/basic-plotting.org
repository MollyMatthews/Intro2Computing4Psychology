# -*- org-link-file-path-type: relative; -*-
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Basic Plotting with R and Python
#+date: <2023-02-10 Fri>
#+author: Britt Anderson
#+email: britt@uwaterloo.ca
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.6-pre)
#+bibliography: /home/britt/gitRepos/Intro2Computing4Psychology/chapters/i2c4p.bib
#+cite_export: csl assets/chicago-note-bibliography-16th-edition.csl

* Basic Plotting
In this segment we will experiment with plotting data using programing tools and not just dragging lines on a screen or clicking columns in a spreadsheet. The principal advantage of this approach is that the code becomes the documentation for how to generate a plot. This makes it easy to repeat plots with other data sets or to repeat a plot when we have added to our data collection. We can embed the code in our report and the figure will be generated for us. Never again will we search our computers for a missing image file. In addition, this method makes it easy to alter a figure or plot. If we feel the need to change the background color or font size we can just edit our code and hit enter. The new figure with all our old tweaks appears with the new edits.

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/463525019?h=ef13f4bf90" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/463525019">Ja : Intro to Plotting Module (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>A short intro to the outline of this module on plotting with R and Python.</p>
#+end_export


** Plotting in R: A tale of two approaches
   R has two main contenders in the plotting domain: base and ggplot. This topic takes a look at both. 

* Why Both R and Python? Why Can't I Just Pick One?
  While it may be /theoretically/ possible to do anything that can be done in one computer language in another (after all [[https://www.felienne.com/archives/2974][Excel is Turing complete]]) it may be /practically/ easier in one language than another.   Thus you want to balance being a jack of all trades, but a master of none, with expertise that runs deep, but is narrow. My experience has been that knowing the basics of a few languages is better when you are trying to stitch something together. You can pull what is good from each and glue them together. You take pieces that are robust and have been well vetted and use your own glue code to create the pipeline for your one off or urgent need. However, for something that you will be using in the long term, or where you contemplate sharing with others, it may be better to dig deep and learn some of the specialist's knowledge in one particular programming language. This is another example of making your tools appropriate to your task. A jack-knife is handy to have, you can do almost anything with it, but it is rarely the best tool for any job (I think the source for this is [[https://en.wikipedia.org/wiki/John_Tukey][John Tukey]]).

This analogy is particulary apt when it comes to plotting. While I expect the situation to evolve substantially in the next couple of years (it has greatly over the last few) plotting and data handling are currently easier, more stable, and better documented in R. Thus, even if you gather experimental data from a psychology experiment programmed in python you will often find it more convenient to explore that data in an R environment. But it is good to know more than one way to do things, and to have your own experience for comparison. Here we will generate similar plots with both R and Python for you to draw your own conclusions.
  
* R
** Libraries for Plotting 
   Plotting in R is not one thing. There are at least three plotting libraries you could choose from in R, and two are very common. =Base plot= and =ggplot= are the two most common. They can do similar things, but the libraries authors took very different design approaches. With /base/ you build up your plot line by line, entry by entry. With /ggplot/ you create a description of your plot. It is easier to get nice plots quickly with /ggplot/. It is easier to tweak a plot to perfection in /base./ These are my personal opinions and I find that different users feel comfortable in the different libraries. You should try both and draw your own conclusions.
** A first taste of plotting in R
    First, make some pseudo-data. We can use [[https://www.math.csi.cuny.edu/Statistics/R/simpleR/stat007.html][the random number generators]] of ~R~ to supply us some data for plotting.[fn:2]

    #+begin_src R :session *rPlotting* :results output :exports both
      xs <- 1:10
      ysquare <- xs^2
      ydouble  <- 2*ysquare
      yrandom  <- rnorm(10)
      mapply(function (x,y,z,q) {c(x,y,z,q)}, xs, ysquare, ydouble, yrandom)
    #+end_src

    #+RESULTS:
    #+begin_example
	      [,1]      [,2]      [,3]      [,4]        [,5]      [,6]      [,7]
    [1,] 1.0000000  2.000000  3.000000  4.000000  5.00000000  6.000000  7.000000
    [2,] 1.0000000  4.000000  9.000000 16.000000 25.00000000 36.000000 49.000000
    [3,] 2.0000000  8.000000 18.000000 32.000000 50.00000000 72.000000 98.000000
    [4,] 0.1384254 -1.557606 -0.711208 -1.747739 -0.08815572 -1.352746  1.115078
	       [,8]        [,9]       [,10]
    [1,]   8.000000   9.0000000  10.0000000
    [2,]  64.000000  81.0000000 100.0000000
    [3,] 128.000000 162.0000000 200.0000000
    [4,]   0.287054  -0.7717476   0.4622967
    #+end_example


    We use ~R~'s assignment operator to create a sequence from 1 to 10 for our x values and then create three different y values as deterministic or random values. Then I use a /map/ to apply a function to four arguments to create a /tuple/ with elements from each list. This map takes a function as the first argument. That is, functions can be "data". This function is /anonymous/. The use of anonymous functions and map's is advanced, so just note the potential power of being able to zip four lists together pretty easily, and worry about whether you can do that later in the course. 

*** Base Plot

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/463524914?h=5a0c9a1bd9" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/463524914">Jb : Using Base Plot in R (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>One of three main plotting frameworks in R, the base plot package comes ready to use with a base R installation.</p>
#+end_export
    

For base plot two primitive commands are ~plot~ and ~lines~. Be careful. There is a command ~line~ (no 's'). That is not what you will want here.
     #+begin_src R :session *rPlotting* :results file graphics replace :exports both :file ./baseplot1.png :dir .
     plot(xs,ydouble)
     #+end_src

     #+RESULTS:
     [[file:./baseplot1.png]]

*** Changing the look of base plot

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/463524870?h=38d6437425" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/463524870">Jc : Editing the Aesthetics of a Base R Plot (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>Once you have a base R scatter plot how might you go about changing its appearance?</p>
#+end_export

You have multiple /hidden/ arguments you can use to change the look of the plot such as the symbols, whether it plots lines or dots, the color, the font size. Always remember to try the help command. Here is just one example. Help is your friend here. Try ~help(plot)~ in your R console. 

     #+begin_src R :session *rPlotting* :results file graphics replace :file ./baseplot2.png
     plot(xs,ysquare,type = 'b', frame = F, pch = 19, col = "red" , ylab = "y", lty = 1, lwd = 3)
     #+end_src

     #+RESULTS:
     [[file:./baseplot2.png]]

     


     How would you include another data series in this plot?

     #+Name: addlines
     #+Caption: Our base plot with additional data series added.
     #+begin_src R :session *rPlotting* :results file graphics :exports both :file "./baseplot3.png"
            plot(xs,ysquare,type = 'b', frame = F, pch = 19, col = "red" , ylab = "y", lty = 1, lwd = 3)
            lines(xs,ydouble, pch = 18, col = "blue", type = "b" , lty = 2, lwd = 1)
            lines(xs,yrandom, pch = 17, col = "green" , type = "l", lty=3, lwd = 4)
            legend("topleft", legend = c("Line 1", "Line 2", "Line 3"), col = c("red","blue","green"),
                   lty = 1:3, cex = 0.8)
    #+end_src

    #+RESULTS: addlines
    [[file:./baseplot3.png]]

    To figure out what the ~lines~ are doing don't forget the help commands: ~?lines~.

     Who wants to try and recreate this in Excel or SPSS? As a quick test can you change the color and line type of each series?

*** ggplot

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/463524796?h=30f0620069" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/463524796">Jd : GGplot in R (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>The second main plotting framework for R (ggplot2) offers a different graphical model, but some very nice out of the box aesthetics.</p>

#+end_export
     =ggplot= uses a model where you build things up  bit by bit all in one line, and you can keep adding to the same object. For instance. 
     
     Note that people tend to say "ggplot", but they always mean =ggplot2=. Note the number "2". If you do not have ~ggplot~ you will need to install it, and when you do you will note that ~ggplot~ requires a lot of other packages to function properly. One reason to prefer the base package is a greater simplicity of installation. However, once you move on beyond simple 2d line and scatter plots base plotting too grows more complex.
     
     #+begin_src R :session *rPlotting* :results file replace graphics :exports both :file "./ggplot1.png" 
       library(ggplot2)
       p  <- ggplot(data = data.frame("x" = xs, "y1" = ysquare, "y2" = ydouble, "y3" = yrandom), aes(x = xs, y = ysquare, col= 'r'))
       p <- p + geom_point() + geom_line() + theme(legend.position = c(0.2,0.65)) + geom_line(aes(x=x,y=ydouble, col = "blue")) + geom_line(aes(y=yrandom,col = "green"))
       ggsave("ggplot1.png", width = 8, height = 5, units = "cm") 
     #+end_src

     #+RESULTS:
     [[file:./ggplot1.png]]

Notice that here we are saving the results of our calls to ~ggplot~ as a variable. We can either type that variable at the command line to see the plot, or we can use that variable to save our plot as a file. The style is quite different from the base plot above, and can be a bit harder to begin with. We are creating an object. Initially, in the line above where we first use ggplot we don't actually plot anything. We just create our plotting object and populate the data. Later on we use a method to plot this data with a particular syle, the point, and then again with the line.

** Practice makes perfect
    To get some hands on experience with plotting I suggest creating [[https://en.wikipedia.org/wiki/Scatter_plot][scatter plots]] and [[https://en.wikipedia.org/wiki/Box_plot][box plots]] with R using one of the built in data sets. 
    1. Using the R data set ~mtcars~ create in both base plot and ggplot a scatterplot of *mpg* and *wt*. What would you expect this to show even before you plot it. One way to make sure your code is doing what you want is to visualize what you expect. If that is not what you see then either your code is wrong or your understanding of the functions and what they do is wrong. Either way you know something is not right and you can set about fixing it. 
    2. Using the R data set ~ToothGrowth~ generate boxplots for ~len~ and ~dose~. If you are feeling creative overlay the data points on top of the box plot.
       Here are a couple of links to help you get started:
       1. [[http://www.sthda.com/english/wiki/box-plots-r-base-graphs][box-plots-r-base-graphs]]
       2. [[http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs][scatter-plots-r-base-graphs]]
       3. [[http://www.sthda.com/english/wiki/qplot-quick-plot-with-ggplot2-r-software-and-data-visualization#scatter-plots][ggplot2-scatter-plots]]
       4. [[http://www.sthda.com/english/wiki/ggplot2-box-plot-quick-start-guide-r-software-and-data-visualization][ggplot2-boxplots]]
*** Lattice (the third, very powerful, plotting alternative for R)
     [[https://stat.ethz.ch/R-manual/R-devel/library/lattice/html/Lattice.html][
Lattice Plot Overview]]

When should you consider using ~lattice~? When multivariate data are at play. One of the good examples of this that comes up often in psychology is the interaction plot. For analyses of variance you frequently encounter pairs of factors, say age and weight, that you want to plot against each other, and where you want to separate out the effect of a third factor on that relationship (e.g. gender). 

* Python

#+begin_export html
<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/463524647?h=9fa558f167" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/463524647">Je : Plotting with Python (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>Matplotlib is the workhorse plotting library for python. Yet another different approach to plotting from those in R it can produce graphics of equally high quality.</p>
#+end_export

Python has many plotting libraries too. [[https://matplotlib.org/][Matplotlib]] is very popular and the most well established. It is leveraged by the Pandas package to make plotting available from Pandas. Other plotting libraries worth checking out are [[https://seaborn.pydata.org/][Seaborn]] and [[https://docs.bokeh.org/en/latest/][Bokeh]]. Bokeh seeks to use the same graphics grammar as ggplot. Lastly, [[https://plotly.com/python/][Plotly]] has become popular and can make interactive plots as well.
** Interaction Plots
    This example is included because SPSS, a common and powerful statistical package used by many psychologists, makes interaction plots difficult to achieve (or so I am told - I have never used SPSS). If you are taking an advanced statistics course knowing how to create these kinds of plots could be very useful. 
** Getting the data
    For this example we will use the data from [[http://personality-project.org/r/datasets/heating.txt]], but you don't need to download it manually. We can do this from within python itself. Instead of using the request library (a general library in python for making internet requests) we will use the ~read_csv~ functionality of pandas to read data from a url (universal resource locator - an address on the world wide web). [fn:1]

** Pandas Read in Text

#+Name: Changing the working directory
#+begin_src python :session *pyPlotting* :exports code :results silent
  import os
  os.chdir(".")
#+end_src

The above code block is a little bit of housekeeping to make sure it is easy for me to embed the plots. It is not too important here, but I wanted to leave it visible in case you run into problems. 


#+begin_src python :session *pyPlotting*

  import pandas as pd
  url = "http://personality-project.org/r/datasets/heating.txt"
  d = pd.read_csv(url, sep="\t")
  d.columns
#+end_src

#+RESULTS:
: Index(['therms', 'degreedays', 'Location', 'days', 'ddd', 'thermsd',
:        'thermsdd'],
:       dtype='object')



For this exercise, we want to get plots of degree days versus therms, but we want to do it separately for each type of house to see if there is an /interaction/. That is, is the relationship between degree days and therms different for the different types of houses. Types of houses /interacts/ with ~degreedays~ when we want to predict ~therms~. 

We will also use some additional python modules to help us make this easier, specifically ~scipy~, ~matplotlib~, and ~statsmodels~. These can be installed via ~pip~.


#+begin_src python :session *pyPlotting* :results file graphics :var f="example-os.png" :exports both
  from statsmodels.graphics.factorplots import interaction_plot
  from matplotlib import pyplot as plt
  interaction_plot(d['degreedays'], d['Location'], d['therms'])
  plt.savefig(f)
  f
#+end_src

#+RESULTS:
[[file:example-os.png]]


This gives us a "connect-the-dots" sort of look to our data. We would prefer to [[https://en.wikipedia.org/wiki/Linear_least_squares][fit a line]], a /best/ possible line, to our data. We want to pick the line that runs through the data points and is as close as possible (measured in the y direction) to all the data points. The techniques for doing this, and the theory, come from your stats courses, but we can use those tools here without explanation just to get some practice with the libraries and functions that will later come in handy. 

#+begin_src python :session *pyPlotting* :results value file graphics :exports both :var fn="./py-inter-fit-plt.png"
  from statsmodels.formula.api import ols
  ols_d = ols(formula="therms ~ degreedays * Location", data=d)
  my_fits = ols_d.fit()
  plt.clf()
  f = plt.figure()
  a = f.gca()
  ip1 = interaction_plot(d['degreedays'], d['Location'], my_fits.fittedvalues, plottype="line", ax=a)
  ip2 = interaction_plot(d['degreedays'], d['Location'], d['therms'], plottype='scatter', ax=a)
  lines, labels = f.axes[0].get_legend_handles_labels()
  a.legend_ = None
  f.legend(lines[0:3], labels[0:3], loc='upper left', bbox_to_anchor=(0.15, 0.85))
  plt.savefig(fn)
  fn
#+end_src

#+RESULTS:
[[file:./py-inter-fit-plt.png]]



Note that figuring out how to get the legend only for the plot with the lines and not a redundant legend for the scatterplot, and to place it properly took me about an hour. This is not as easy a system to get started in as the ~R~ commands are. 

* Assessment
Words of warning: do not think you can just cut and paste the R commands with the Python commands and vice versa. You will need to look up how to do the things in python that we do in R and vice versa by consulting online sources. In some cases the easy thing in R is hard in python and vice versa.

* Plotting Assessment: R and Python
:PROPERTIES:
:custom_id: plotting_assessment
:END:


** Task
  1. Do exactly what we did in the topic, but reverse which language you use to do each.
  2. Use python functions to generate a sequence (for the x), a function to get a y from the x, and a random number generator to get y_randoms as long as the x and y values, and then generate a line and scatter plot for your x and y's and y_random's all on the same plot.
  3. The interaction plot should be done with R

** What to submit
  An *.org file that includes code blocks for the plots (and the included files for the plots) that accomplish the assigned tasks. It should export to a nice html.

** Hints
  - R can read in data from a url as well as pandas. See [[https://stackoverflow.com/questions/6299220/access-a-url-and-read-data-with-r][this]]stack overflow question/answer.
  - R has a [[https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/interaction.plot][built in function]] for interaction plots that might work.
  - It might be easier with ~ggplot~. Here is a [[https://sebastiansauer.github.io/vis_interaction_effects/][blog]] showing how.
  - [[https://docs.python.org/3/library/random.html][Random numbers]] are easy in python.
  - What you need for [[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.line.html][plotting lines]] in python is shown in the interaction plot example - just skip the "ols" model part. 


* Footnotes
[fn:2] The course notes are being generated from org mode files using babel source code blocks. Getting these blocks right can be tricky and may involve language specific adjustments. Please consult the =org= files for details on the /header/ fields, their keywords, and how I use them to change the outputs. Note specifically that the colons are extremely important. The directory you set up to work in may also need to be changed if you recompile these notes locally.  

[fn:1] Notice that in this file we will execute both R code and Python code mixed with text. We will run  separate sessions of R and python that allow us to mix and share variables within the code blocks for each language.
     
